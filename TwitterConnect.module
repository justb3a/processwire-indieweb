<?php

/**
 *
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 *
 * @author Tabea David <td@kf-interactive.com>
 * @version 0.0.1
 * @copyright Copyright (c) 2014 KF Interactive, www.kf-interactive.com, <info@kf-interactive.com>
 * @see https://github.com/justonestep/processwire-mobiledetect
 * @see http://www.processwire.com
 */

require_once('oauth/OAuth.php');
require_once('oauth/Twitter.php');

/**
 * Class TwitterConnect
 */
class TwitterConnect extends WireData implements Module, ConfigurableModule {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Twitter Connect',
      'summary' => '',
      'version' => 1,
      'href' => 'https://github.com/justonestep/processwire-mobiledetect',
      'singular' => true,
      'autoload' => true,
    );
  }

  /**
   * @field array Default config values
   */
  protected static $defaults = array(
    'consumerKey' => '',
    'consumerSecret' => '',
    'accessToken' => '',
    'accessTokenSecret' => '',
    'resourceUpdate' => 'https://api.twitter.com/1.1/statuses/update.json',
    'resourceUpdateWithMedia' => 'https://api.twitter.com/1.1/statuses/update_with_media.json'
  );


  /**
   * Retrieves the list of config input fields
   *
   * Implementation of the ConfigurableModule interface
   *
   * @param array $data The config data
   * @return InputfieldWrapper
   * @see http://processwire.com/apigen/class-ConfigurableModule.html
   */
  public static function getModuleConfigInputfields(array $data) {
    $data = array_merge(self::$defaults, $data);

    $fields = new InputfieldWrapper();
    $modules = wire('modules');

    $field = $modules->get('InputfieldText');
    $field->label = __('Consumer Key');
    $field->attr('name', 'consumer_key');
    $field->attr('size', 50);
    $field->attr('value', $data['consumer_key']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Consumer Secret');
    $field->attr('name', 'consumer_secret');
    $field->attr('size', 50);
    $field->attr('value', $data['consumer_secret']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Access Token');
    $field->attr('name', 'access_token');
    $field->attr('size', 50);
    $field->attr('value', $data['access_token']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Access Token Secret');
    $field->attr('name', 'access_token_secret');
    $field->attr('size', 50);
    $field->attr('value', $data['access_token_secret']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Resource Update');
    $field->attr('name', 'resource_update');
    $field->attr('size', 50);
    $field->attr('value', $data['resource_update']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Resource Update With Media');
    $field->attr('name', 'resource_update_with_media');
    $field->attr('size', 50);
    $field->attr('value', $data['resource_update_with_media']);
    $field->columnWidth = '50';
    $fields->append($field);

    return $fields;
  }

  /**
   * Initialize the module
   * Initialize a new web contact form
   *
   * Implementation of the Module interface
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   * @param Template $template Template object holding the form's fields.
   *
   */
  public function init() {
    $this->addHookBefore('Pages::published', $this, 'postToTwitter');
  }

  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function postToTwitter(HookEvent $event) {
    $page = $event->arguments(0);

    if (!empty($page->category) && $page->category === 'tweet') {
      $result = $this->doPostToTwitter($page);

      if (is_array($result) && !empty($result['id_str'])) {
        $page->twitter_post_id = (int)$result['id_str'];
        $page->save();
      }
    }
  }

  public function doPostToTwitter($page) {
    $data = array(
      // 'media' => $page->images->first->url,
      'status' => $page->content
    );

    $consumer = new Twitter_OAuthConsumer($this->consumer_key, $this->consumer_secret);
    $token = new Twitter_OAuthConsumer($this->access_token, $this->access_token_secret);
    $signatureMethod = new Twitter_OAuthSignatureMethod_HMAC_SHA1();

    $method = 'POST';
    $resource = isset($data['media']) ? $this->resource_update : $this->resource_update_with_media;

    $request = Twitter_OAuthRequest::from_consumer_and_token(
      $consumer, $token, $method, $resource, $data
    );

    $request->sign_request(
      $signatureMethod, $consumer, $token
    );

    $options = array(
      CURLOPT_HEADER => FALSE,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_POST => TRUE,
      CURLOPT_POSTFIELDS => $data,
      CURLOPT_URL => $request -> to_url(),
      CURLOPT_TIMEOUT => 20,
      CURLOPT_SSL_VERIFYPEER => 0,
      CURLOPT_HTTPHEADER => array('Expect:'),
      CURLOPT_USERAGENT => 'adactio.com',
    );

    $curl = curl_init();
    curl_setopt_array($curl, $options);
    $result = curl_exec($curl);
    curl_close($curl);

    return json_decode($result, true);
  }

}
