<?php

/**
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 *
 * @author Tabea David <td@kf-interactive.com>
 * @version 0.0.1
 * @copyright Copyright (c) 2015 KF Interactive, www.kf-interactive.com, <info@kf-interactive.com>
 * @see https://github.com/justonestep/processwire-indieweb
 * @see http://www.processwire.com
 */

require_once(wire('config')->paths->IndieWeb . 'lib/Micropub.php');
require_once(wire('config')->paths->IndieWeb . 'lib/TwitterConnect.php');
require_once(wire('config')->paths->IndieWeb . 'lib/Webmentions.php');
use Kfi\IndieWeb\Micropub;
use Kfi\IndieWeb\TwitterConnect;
use Kfi\IndieWeb\Webmentions;

/**
 * Class IndieWeb
 */
class IndieWeb extends WireData implements Module, ConfigurableModule {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Indie Web',
      'summary' => 'This module provides an easy way to add a basic twitter connection to your site.',
      'version' => 1,
      'href' => 'https://github.com/justonestep/processwire-indieweb',
      'singular' => true,
      'autoload' => true,
      'icon' => 'empire'
    );
  }

  /**
   * string class name
   */
  const CLASS_NAME = 'IndieWeb';

  /**
   * @field array Default config values
   */
  protected static $defaults = array(
    'consumerKey' => '',
    'consumerSecret' => '',
    'accessToken' => '',
    'accessTokenSecret' => '',
    'twitterHandle' => ''
  );

  protected static $tmpls = array(
    'list' => 'iw_notes',
    'single' => 'iw_note'
  );

  protected static $geocodeEndpoint = 'http://maps.googleapis.com/maps/api/geocode/json?latlng=%f,%f&sensor=false';

  /**
   * construct - require libs
   */
  public function __construct() {
    wire('config')->twitterStatusURL = 'https://twitter.com/' . $this->twitterHandle . '/status/';
  }

  /**
   * Retrieves the list of config input fields
   *
   * Implementation of the ConfigurableModule interface
   *
   * @param array $data The config data
   * @return InputfieldWrapper
   * @see http://processwire.com/apigen/class-ConfigurableModule.html
   */
  public static function getModuleConfigInputfields(array $data) {
    $data = array_merge(self::$defaults, $data);

    $fields = new InputfieldWrapper();
    $modules = wire('modules');

    $field = $modules->get('InputfieldText');
    $field->label = __('Consumer Key');
    $field->attr('name', 'consumerKey');
    $field->attr('size', 50);
    $field->attr('value', $data['consumerKey']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Consumer Secret');
    $field->attr('name', 'consumerSecret');
    $field->attr('size', 50);
    $field->attr('value', $data['consumerSecret']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Access Token');
    $field->attr('name', 'accessToken');
    $field->attr('size', 50);
    $field->attr('value', $data['accessToken']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Access Token Secret');
    $field->attr('name', 'accessTokenSecret');
    $field->attr('size', 50);
    $field->attr('value', $data['accessTokenSecret']);
    $field->columnWidth = '50';
    $fields->append($field);

    $field = $modules->get('InputfieldText');
    $field->label = __('Twitter Handle');
    $field->attr('name', 'twitterHandle');
    $field->attr('size', 50);
    $field->attr('value', $data['twitterHandle']);
    $field->columnWidth = '50';
    $fields->append($field);

    return $fields;
  }

  /**
   * Initialize the module
   * Initialize a new web contact form
   *
   * Implementation of the Module interface
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   * @param Template $template Template object holding the form's fields.
   *
   */
  public function init() {
    // set page title to current datetime
    $this->addHookBefore('Inputfield::render', $this, 'renderField');

    // post to twitter
    $this->addHookBefore('Pages::published', $this, 'postingToTwitter');

    // add geolocation to determine lat and long
    $this->addHookAfter('ProcessPageEdit::execute', $this, 'addGeolocation');
  }

  /**
   * add geolocation script
   *
   * @param HookEvent $event
   */
  public function addGeolocation(HookEvent $event) {
    $this->config->scripts->append($this->config->urls->{self::CLASS_NAME} . 'scripts/Geolocation.js');
  }

  public function micropub() {
    new Micropub;
  }

  public function webmention() {
    new Webmentions;
  }

  // public function twitterconnect() {
  //   return new TwitterConnect;
  // }

  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function renderField(HookEvent $event) {
    $field = $event->object;
    $parent_id = wire('input')->get->parent_id;

    if (!empty($parent_id)) {
      $parent = wire('pages')->get($parent_id);

      if ($parent->template->name === self::$tmpls['list']) {
        if (in_array($field->name, array('title', '_pw_page_name')) && empty($field->value)) {
          $field->set('value', date('Ymd-Hi'));
        }
      }
    }
  }


  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function postingToTwitter(HookEvent $event) {
    $page = $event->arguments(0);
    $short = wire('sanitizer')->pageName(substr($page->iw_content, 0, 10));
    $page->title = $page->title . '--' . $short;

    if (!empty($page->iw_category) && $page->iw_category === 'tweet') {
      new TwitterConnect($page);
    }
  }

  public function getAddress($lat, $lng) {
    $address = '';
    $url = sprintf(self::$geocodeEndpoint, trim($lat), trim($lng));
    $json = file_get_contents($url);
    $data = json_decode($json);

    if ($data->status === 'OK') {
      $address = $data->results[3]->formatted_address;
    }

    return $address;
  }

  public function tweetMarkup($tweet) {
    // links
    $tweet = preg_replace('%\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))%s', '<a href="$1">$1</a>', $tweet);

    // hashs
    $tweet = preg_replace('/(^|\s)#(\w*[a-zA-Z_]+\w*)/', '\1<a href="http://twitter.com/search?q=%23\2">#\2</a>', $tweet);

    // users
    $tweet = preg_replace('/@(\w+)/', '<a href="http://twitter.com/$1">@$1</a>', $tweet);

    return $tweet;
  }
}
