<?php namespace ProcessWire;

define('__ROOT__', dirname(__FILE__));

use \IndieWeb\Micropub;
use \IndieWeb\TwitterConnect;
use \IndieWeb\Webmentions;

/**
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 3.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 *
 * @author Tabea David <td@kf-interactive.com>
 * @version 0.0.1
 * @copyright Copyright (c) 2015 KF Interactive, www.kf-interactive.com, <info@kf-interactive.com>
 * @see https://github.com/justonestep/processwire-indieweb
 * @see http://www.processwire.com
 */

/**
 * Class IndieWeb
 */
class IndieWeb extends WireData implements Module, ConfigurableModule {

  const NOTE = 1;
  const PHOTO = 2;
  const TWEET = 3;

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Indie Web',
      'summary' => 'This module provides an easy way to add a basic twitter connection to your site.',
      'version' => 1,
      'href' => 'https://github.com/justonestep/processwire-indieweb',
      'singular' => true,
      'autoload' => true,
      'icon' => 'empire'
    );
  }

  /**
   * string class name
   */
  const CLASS_NAME = 'IndieWeb';

  protected static $tmpls = array(
    'list' => 'iw_notes',
    'single' => 'iw_note',
    'likes' => 'iw_likes',
    'like' => 'iw_like'
  );

  protected static $geocodeEndpoint = 'http://maps.googleapis.com/maps/api/geocode/json?latlng=%f,%f&sensor=false';

  /**
   * construct - require libs
   */
  public function __construct() {
    require_once($this->config->paths->IndieWeb . 'lib/Micropub.php');
    require_once($this->config->paths->IndieWeb . 'lib/TwitterConnect.php');
    require_once($this->config->paths->IndieWeb . 'lib/Webmentions.php');
  }

  /**
   * Initialize the module
   * Initialize a new web contact form
   *
   * Implementation of the Module interface
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   *
   * @param Template $template Template object holding the form's fields.
   *
   */
  public function init() {
    wire('config')->twitterStatusURL = 'https://twitter.com/' . $this->twitterHandle . '/status/';

    // set page title to current datetime
    $this->addHookBefore('Inputfield::render', $this, 'renderField');

    // post to twitter
    $this->addHookBefore('Pages::published', $this, 'postingToTwitter');

    // save location
    $this->addHookAfter('Pages::published', $this, 'convertLocation');

    // send webmention
    $this->addHookBefore('Pages::saved', $this, 'sendWebmention');

    // add geolocation to determine lat and long
    $this->addHookAfter('ProcessPageEdit::execute', $this, 'addGeolocation');
  }

  /**
   * add geolocation script
   *
   * @param HookEvent $event
   */
  public function addGeolocation(HookEvent $event) {
    $this->config->scripts->append($this->config->urls->{self::CLASS_NAME} . 'scripts/Geolocation.js');
  }

  public function micropub() {
    new Micropub;
  }

  public function parseWebmention() {
    $transfer = $this->input->post['source'] ? $this->input->post : $this->input->get;
    $newWebmention = new Webmentions(
      $this->wire('sanitizer')->url($transfer['source']),
      $this->wire('sanitizer')->url($transfer['target'])
    );

    $newWebmention->parseWebmention();
  }

  public function sendWebmention(HookEvent $event) {
    $newWebmention = new Webmentions('', '', $event->arguments(0));
    $newWebmention->sendWebmention();
  }

  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function renderField(HookEvent $event) {
    $field = $event->object;
    $parent_id = wire('input')->get->parent_id;

    if (!empty($parent_id)) {
      $parent = wire('pages')->get($parent_id);
      $title = '';

      if (in_array($field->name, array('title', '_pw_page_name')) && empty($field->value)) {
        if ($parent->template->name === self::$tmpls['list']) {
          $title = date('Ymd-Hi');
        } elseif ($parent->template->name === self::$tmpls['likes']) {
          $lastLike = $parent->children('sort=-created')->first();
          $title = $lastLike ? (int)$lastLike->title + 1 : 1;
        }

        if ($title) $field->set('value', $title);
      }
    }
  }

  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function convertLocation(HookEvent $event) {
    $page = $event->arguments(0);
    $this->getAddress($page);
  }

  /**
   * Hook
   *
   * @param HookEvent $event
   */
  public function postingToTwitter(HookEvent $event) {
    $page = $event->arguments(0);
    $short = wire('sanitizer')->pageName(substr($page->iw_content, 0, 10));
    $page->title = $page->title . '--' . $short;

    $category = (string)$page->iw_category;
    if (!$page->iw_twitter_post_id && (int)$category === self::TWEET) {
      new TwitterConnect($page);
    }
  }

  public function getAddress($page) {
    $address = $page->iw_location_name;
    if (!$address) {
      $url = sprintf(self::$geocodeEndpoint, trim($page->iw_location_latitude), trim($page->iw_location_longitude));
      $json = file_get_contents($url);
      $data = json_decode($json);

      if ($data && $data->status === 'OK') $address = $data->results[3]->formatted_address;

      $page->setAndSave('iw_location_name', $address);
    }

    return $address;
  }

  public function tweetMarkup($tweet, $detectLinks = false) {
    // links
    if ($detectLinks) {
      $tweet = preg_replace('%\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))%s', '<a href="$1">$1</a>', $tweet);
    }

    // hashs
    $tweet = preg_replace('/(^|\s)#(\w*[a-zA-Z_]+\w*)/', '\1<a href="http://twitter.com/search?q=%23\2">#\2</a>', $tweet);

    // users
    $tweet = preg_replace('/@(\w+)/', '<a href="http://twitter.com/$1">@$1</a>', $tweet);

    return $tweet;
  }

  /**
  * Crop a text
  *
  * @param string $str
  * @param int $maxlen
  * @return string
  */
  public function truncateContent($str, $maxlen = 450) {
    $str = strip_tags($str, '<a>');
    if (strlen($str) > $maxlen) {
      $str = substr($str, 0, $maxlen);

      if (!preg_match('/[!?.]/', substr($str, -1, 1))) {
        preg_match_all('/[!?.]/', $str, $matches, PREG_OFFSET_CAPTURE);
        $end = end($matches[0])[1];

        if (!empty($end)) {
          $str = substr($str, 0, end($matches[0])[1] + 1);
        } elseif (substr($str, -1, 1) != ' ') {
          $str = substr($str, 0, strrpos($str, ' '));
        }
      }
    }

    return trim($str);
  }
}
